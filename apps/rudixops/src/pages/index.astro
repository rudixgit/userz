---
import Code from "../components/Code.astro";
import { contentxx } from "../components/content";
import Layout from "../layouts/Layout.astro";
const struct = {
	name: "RudixOps",
	description: "AWS DevOps as a Service",
	families: [
		{
			name: "Serverless",
			description:
				"Deploy serverless applications using AWS Lambda and related services.",
			services: [
				{
					name: "AWS Lambda",
					description:
						"Run your code without provisioning or managing servers.",
					useCases: [
						"Microservices-based applications",
						"Event-driven applications",
						"Real-time data processing",
					],
				},
				{
					name: "Amazon API Gateway",
					description:
						"Create, publish, and secure APIs at any scale.",
					useCases: [
						"RESTful APIs",
						"Websocket APIs",
						"Microservices-based applications",
					],
				},
				{
					name: "Amazon DynamoDB",
					description:
						"Fully-managed NoSQL database service that provides fast and predictable performance.",
					useCases: [
						"Web and mobile applications",
						"Gaming and social apps",
						"IoT and real-time systems",
					],
				},
				{
					name: "Amazon S3",
					description:
						"Object storage built to store and retrieve any amount of data from anywhere.",
					useCases: [
						"Backup and restore",
						"Data lakes and analytics",
						"Static website hosting",
					],
				},
				{
					name: "AWS Step Functions",
					description:
						"Coordinate the components of your application using visual workflows.",
					useCases: [
						"Microservices-based applications",
						"ETL workflows",
						"Image and media processing",
					],
				},
				{
					name: "AWS AppSync",
					description:
						"Develop and deploy serverless GraphQL APIs with real-time data synchronization and offline programming features.",
					useCases: [
						"Mobile and web applications",
						"IoT applications",
						"Real-time data processing",
					],
				},
				{
					name: "AWS EventBridge",
					description:
						"Serverless event bus that makes it easy to connect applications using data from your own applications, integrated Software-as-a-Service (SaaS) applications, and AWS services.",
					useCases: [
						"Serverless architectures",
						"Data-driven applications",
						"Event-driven architectures",
					],
				},
			],
		},
		{
			name: "Continuous Integration/Continuous Deployment (CI/CD)",
			description:
				"Automate your software development pipeline and deploy your applications with ease.",
			services: [
				{
					name: "AWS CodePipeline",
					description:
						"Build, test, and deploy your code every time there is a code change, based on the release process models you define.",
					useCases: [
						"Web applications",
						"Mobile applications",
						"Serverless applications",
					],
				},
				{
					name: "AWS CodeBuild",
					description:
						"Fully-managed build service that compiles source code, runs tests, and produces software packages that are ready to deploy.",
					useCases: [
						"Web applications",
						"Mobile applications",
						"Serverless applications",
					],
				},
				{
					name: "AWS CodeDeploy",
					description:
						"Automate code deployments to any instance, including Amazon EC2 instances and instances running on-premises.",
					useCases: [
						"Web applications",
						"Mobile applications",
						"Serverless applications",
					],
				},
			],
		},
		{
			name: "Infrastructure as Code",
			description:
				"Provision and manage your AWS infrastructure using code, and avoid manual configuration errors.",
			services: [
				{
					name: "AWS CloudFormation",
					description:
						"Create and manage a collection of related AWS resources, provision them in an orderly and predictable fashion, and manage them as a single unit.",
					useCases: [
						"Cloud infrastructure",
						"On-premises infrastructure",
						"Hybrid infrastructure",
					],
				},
				{
					name: "AWS CDK",
					description:
						"Define cloud infrastructure using familiar programming languages and deploy it using AWS CloudFormation.",
					useCases: [
						"Cloud infrastructure",
						"On-premises infrastructure",
						"Hybrid infrastructure",
					],
				},
				{
					name: "Terraform",
					description:
						"Define infrastructure as code using a simple, declarative language,",
				},
			],
		},
	],
};
const nav = [
	{ file: "package.json", selected: true },
	{ file: "package.json" },
	{ file: "package.json" },
];
---

<Layout title="userz dot net.">
	<div
		class="sticky top-0 z-50 flex flex-wrap items-center transition duration-500 dark:shadow-none backdrop-blur-md"
	>
		<div class="flex justify-center items-center h-14 pl-2 w-full bg-black">
			<svg
				aria-hidden="true"
				viewBox="0 0 42 10"
				fill="none"
				class="h-3 w-auto stroke-slate-500/30"
			>
				<circle cx="5" cy="5" r="5" fill="#FF5F57"></circle>
				<circle cx="21" cy="5" r="5" fill="#FEBC2F"></circle>
				<circle cx="37" cy="5" r="5" fill="#28C840"></circle>
			</svg>
			<div class="text-xs w-full flex justify-center items-center">
				<img
					src="/rudixops.png"
					alt=""
					style="max-height:30px;"
					class="-ml-6"
				/>
			</div>
		</div>
		<div class="container mx-auto">
			<div class="-ml-px flex text-xs">
				{
					nav.map(({ file }: { file: string }) => (
						<div class="flex h-6 rounded-t-md  border border-slate-300/5 text-sky-300">
							<div class="flex items-center rounded-t-md px-2.5 bg">
								{file}
							</div>
						</div>
					))
				}
			</div>
			<div class="-mt-px border-t border-slate-300/5"></div>
		</div>
	</div>
	<div class="container mx-auto">
		<Code code={contentxx} />
	</div>
	<script is:inline>
		const html = document.documentElement;
		const canvas = document.getElementById("hero-lightpass");
		const context = canvas.getContext("2d");
		const frameCount = 31;
		const currentFrame = (index) => {
			return `/netvidimg/${index.toString().padStart(3, "0")}.jpeg`;
		};

		const preloadImages = () => {
			for (let i = 1; i < frameCount; i++) {
				const img = new Image();
				img.src = currentFrame(i);
			}
		};
		// Set canvas dimensions
		function getNewHeight(width) {
			const originalWidth = 540;
			const originalHeight = 304;
			const scalingPercentage = width / originalWidth;
			const newHeight = originalHeight * scalingPercentage;
			return newHeight;
		}
		const img = new Image();
		const w = window.innerWidth;
		img.src = currentFrame(1);
		canvas.width = w;
		canvas.height = getNewHeight(w);
		img.onload = function () {
			context.drawImage(img, 0, 0, w, getNewHeight(w));
		};

		const updateImage = (index) => {
			img.src = currentFrame(index);
			context.drawImage(img, 0, 0, w, getNewHeight(w));
		};

		window.addEventListener("scroll", () => {
			const scrollTop = html.scrollTop;
			const maxScrollTop = html.scrollHeight - window.innerHeight;
			const scrollFraction = scrollTop / maxScrollTop;
			const frameIndex = Math.min(
				frameCount - 1,
				Math.ceil(scrollFraction * frameCount)
			);

			requestAnimationFrame(() => updateImage(frameIndex + 1));
		});

		preloadImages();
	</script>
</Layout>
