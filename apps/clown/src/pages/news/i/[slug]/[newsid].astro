---
import { uniqBy } from "lodash";
import db from "../../../../../../kloun/data/client";
import CardNews from "../../../../components/CardNews.astro";
import RudSense from "../../../../components/RudSense.astro";
import Layout from "../../../../layouts/Layout.astro";
function countAlphanumeric(str: string) {
    const regex = /[a-zA-Z0-9а-яА-Я]/g;
    const matches = str.match(regex);
    return matches ? matches.length : 0;
}
// function checkNumeric(str: string): boolean {
//   const chars: string[] = str.split('');
//   console.log('chars', chars);
//   const nums: string[] = chars.filter((char: string) => !isNaN(parseInt(char)) && char !== ' ');
//   console.log('nums', nums);
//   return nums.length > chars.length / 2;
// }

function getLastP(arr: { type: string; content: string }[]) {
    const emptylines = arr.filter((x) => countAlphanumeric(x.content) !== 0);
    const lastPElemIndex = emptylines.reduce((acc, curr, index) => {
        if (curr.type === "p") {
            acc = index;
        }
        return acc;
    }, 0);
    const filteredArr = arr.slice(0, lastPElemIndex + 1);
    const removeNoImages = filteredArr.filter(
        (x) =>
            x.type === "p" || (x.type === "img" && x.content.includes("http"))
    );
    const arrx = uniqBy(removeNoImages, function (e) {
        return e.content;
    });
    return arrx;
}
const { newsid } = Astro.params as { newsid: string; slug: string };

const data = await db.get(newsid);

const news = await db.view("newsbg/news", {
    reduce: false,
    limit: 10,
    update: "lazy",
    start_key: data.nid,
    descending: true,
    skip: 1,
});

const { title, image, content, html } = data;

const parsed = content
    ? JSON.parse(content).html.map((x: string) => ({
          type: "p",
          content: x,
      }))
    : (html as { type: string; content: string }[]);
---

<Layout title={title} description={title} image={image}>
    <h1 class="font-bold sm:text-2xl md:text-4xl">{title}</h1>
    <div class="mb-6   items-center justify-center">
        <RudSense />
  
            <article class="leading-relaxed" id="article">
                {
                    getLastP(parsed).map(
                        ({
                            type,
                            content,
                        }: {
                            type: string;
                            content: string;
                        }) =>
                            type === "p" ? (
                                <p class="text-md">{content}</p>
                            ) : (
                                <div class="flex justify-center items-center">
                                    <img src={content} class="rounded-md" />
                                </div>
                            )
                    )
                }
            </article>
         <div class="clear-both" /> 
        <RudSense />
        <div class="clear-both" /> 
    </div>
    <div class="flex flex-wrap gap-3">
        {
            news.rows.map(
                ({
                    id,
                    title,
                    date,
                    key,
                    image,
                }: {
                    id: string;
                    title: string;
                    date: string;
                    key: string;
                    image: string;
                }) => (
                    <CardNews
                        title={title}
                        img={image}
                        date={date}
                        key={key}
                        id={id}
                    />
                )
            )
        }
    </div>
</Layout>
