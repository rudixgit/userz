---
import { shuffle, uniqBy } from "lodash";
import db from "../../../../../../kloun/data/client";
import CardNews from "../../../../components/CardNews.astro";
import RudSense from "../../../../components/RudSense.astro";
import Layout from "../../../../layouts/Layout.astro";
function countAlphanumeric(str: string) {
    const regex = /[a-zA-Z0-9а-яА-Я]/g;
    const matches = str.match(regex);
    return matches ? matches.length : 0;
}
// function checkNumeric(str: string): boolean {
//   const chars: string[] = str.split('');
//   console.log('chars', chars);
//   const nums: string[] = chars.filter((char: string) => !isNaN(parseInt(char)) && char !== ' ');
//   console.log('nums', nums);
//   return nums.length > chars.length / 2;
// }

function getLastP(arr: { type: string; content: string }[]) {
    const emptylines = arr.filter((x) => countAlphanumeric(x.content) !== 0);
    const lastPElemIndex = emptylines.reduce((acc, curr, index) => {
        if (curr.type === "p") {
            acc = index;
        }
        return acc;
    }, 0);
    const filteredArr = arr.slice(0, lastPElemIndex + 1);
    const removeNoImages = filteredArr.filter(
        (x) =>
            x.type === "p" || (x.type === "img" && x.content.includes("http"))
    );
    const arrx = uniqBy(removeNoImages, function (e) {
        return e.content;
    });
    return arrx;
}
const { newsid,slug } = Astro.params as { newsid: string; slug: string };

 const keys = slug.split('-').filter(x => x.length > 4)
 
const datax = db.get(newsid);

// const news = await db.view("newsbg/news", {
//     reduce: false,
//     limit: 10,
//     update: "lazy",
//     start_key: data.nid,
//     descending: true,
//     skip: 1,
// });

const newsx =  db.view("newsbg/search", {
    update: "lazy",
    keys: JSON.stringify(shuffle(keys)),
    descending: true,
    include_docs:"true",
    limit:30
});
 
const resp = await Promise.all([datax, newsx]).then((values) => {
    return {
        data: values[0],
        news: values[1].rows,
    };
});
 
const {data,news} = resp
 
const { title, image, content, html, date, nid } = data;
 

const parsed = content
    ? JSON.parse(content).html.map((x: string) => ({
          type: "p",
          content: x,
      }))
    : (html as { type: string; content: string }[]);
   function formatDate(date: Date): string {
      const options: Intl.DateTimeFormatOptions = {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          hour12: false
        };
      return date.toLocaleString('bg-BG', options);
    }
    function getRandomDate(year: number): Date {
      const month = Math.floor(Math.random() * 12) + 1;
        const day = Math.floor(Math.random() * 31) + 1;
        const hour = Math.floor(Math.random() * 14) + 9;
        return new Date(year, month - 1, day, hour);
    }
Astro.response.headers.set('Cache-Control', 'max-age=31536000');
---

<Layout title={title} description={title} image={image}>
    {formatDate(new Date(date ? date : getRandomDate(2021) ))}
    <h1 class="font-bold sm:text-2xl md:text-4xl">{title}</h1>
    <div class="flex justify-center items-center">
        <img src={'https://kloun.lol/api/img/'+nid+'.jpg'} class="rounded-md" loading="lazy"  />
        
    </div>
    <div class="mb-6 items-center justify-center">
        <RudSense />
        <article class="leading-relaxed" id="article">
            {
                getLastP(parsed).map(
                    ({ type, content }: { type: string; content: string }) =>
                        type === "p" ? (
                            <p class="text-md">{content}</p>
                        ) : (
                            <div class="flex justify-center items-center">
                                <img src={content} class="rounded-md" loading="lazy" />
                            </div>
                        )
                )
            }
        </article>
        <div class="clear-both"></div>
        <RudSense />
        
        <div class="clear-both"></div>
    </div>
    <div class="flex flex-wrap gap-3">
      {
          shuffle(news).slice(0,10).map(
              ({
                  _id,
                  title,
                  date,
                  nid,
                  image,
              }: {
                  _id: string;
                  title: string;
                  date: string;
                  nid: string;
                  image: string;
              }) => (
                  <CardNews
                      title={title}
                      img={image}
                      date={date}
                      key={nid}
                      id={_id}
                  />
              )
          )
      }
    </div>
</Layout>
