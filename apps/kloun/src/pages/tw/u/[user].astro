---
export const prerender = false
import db from "../../../../../kloun/data/client.js";
import RudSense from "../../../components/RudSense.astro";
import Layout from "../../../layouts/Layout.astro";

import TwitterTemplatize, {
	normalizestr,
	templatizeline,
} from "../../../components/TwitterTemplatize.astro";
export type Tweet = {
	screenName: string;
	name: string;
	description: string;
	profileImageUrl: string;
	tweets: ItemTweet[];
};
export type ItemTweet = {
	id: string;
	text: string | { id: number; text: string }[];
	screenName: string;

	name: string;
	profileImageUrl: string;
	createdAt: string;
	originalPoster: {
		screenName: string;
		name: string;
		profileImageUrl: string;
	} | null;
};

const { user } = Astro.params as { user: string };
const data = await db.get(user + "_tw");
if (data.error) {
	return new Response("Not Found", {
		status: 404,
		statusText: "Not Found",
	});
}
const cssx = templatizeline(JSON.stringify(data.tweets))
	.keywordMatch?.map(
		(x) => `.pseudo${normalizestr(x)}::before { content: "${x}";}`
	)
	.join("\n");
const reposts = Array.from(
	new Set(
		data.tweets
			.filter((item: ItemTweet) => item.originalPoster)
			.map(
				(user: { originalPoster: { screenName: string } }) =>
					user.originalPoster.screenName + "_tw"
			)
	)
);
const existget = await db.view("twitter/exist", {
	update: "lazy",
	keys: JSON.stringify(reposts),
	cache: 864000,
	nocdn: "ok",
});
const exist = existget.rows?.map((it: { id: string }) =>
	it.id.replace("_tw", "")
);
Astro.response.headers.set('Cache-Control', 'public, max-age=31536000');
---
<Layout
	title={`${user} public tweets on twitter`}
	description={data.description}
>
	{
		data.tweets.map((t: ItemTweet, i: number) => (
			<div class="bg-gray-800 dark:bg-white mb-2 rounded-md border boder-1 dark:border-gray-500 pb-2">
				{i === 5 && <RudSense />}
				{i === 11 && <RudSense />}
				<div class="flex flex-shrink-0 p-2 pb-0">
					<div class="flex-shrink-0 group block">
						<div class="flex items-center">
							<amp-img
								width="48"
								height="48"
								class="inline-block   rounded-full"
								src={data.profileImageUrl}
								alt=""
								layout="fixed"
							/>

							<div class="ml-2">
								<div class="leading-6 font-light text-xl">
									{data.name}
									<div class="text-xs leading-5 font-light">
										{t.createdAt}{" "}
										{t.originalPoster
											? "| retweeted:"
											: "| tweeted:"}
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

				<div>
					{t.originalPoster && (
						<a
							class="flex items-center  bg-black w-fit"
							href={
								exist?.includes(t.originalPoster.screenName)
									? "/tw/u/" + t.originalPoster.screenName
									: "https://twitter.com/" +
									  t.originalPoster.screenName
							}
						>
							<img
								width="24"
								height="24"
								class="inline-block   rounded-full ml-14"
								src={t.originalPoster.profileImageUrl
									.replace("=--", "")
									.replace("--=", "")}
								alt=""
							/>
							<div class="text-base leading-6 font-bold pl-2">
								{t.originalPoster.name} :
							</div>
						</a>
					)}
					<div class="flex flex-col">
						<TwitterTemplatize obj={t.text} />
						{t.text}
					</div>
				</div>
			</div>
		))
	}
</Layout>
<style is:inline set:html={cssx}></style>
