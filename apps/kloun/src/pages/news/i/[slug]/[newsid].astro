---
export const prerender = false
import uniqBy from "lodash/uniqBy";
 
import db from "../../../../../data/client";
 
import CardNews from "../../../../components/CardNews.astro";
import RudSense from "../../../../components/RudSense.astro";
import Layout from "../../../../layouts/Layout.astro";
function countAlphanumeric(str: string) {
    const regex = /[a-zA-Z0-9а-яА-Я]/g;
    const matches = str.match(regex);
    return matches ? matches.length : 0;
}
 
// function getUniqueStrings(arr1:string[], arr2:string[]) {
//   return arr1.filter(str => !arr2.includes(str));
// }
function getLastP(arr: { type: string; content: string }[]) {
    const emptylines = arr.filter((x) => countAlphanumeric(x.content) !== 0);
    const lastPElemIndex = emptylines.reduce((acc, curr, index) => {
        if (curr.type === "p") {
            acc = index;
        }
        return acc;
    }, 0);
    const filteredArr = arr.slice(0, lastPElemIndex + 1);
    const removeNoImages = filteredArr.filter(
        (x) =>
            x.type === "p" || (x.type === "img" && x.content.includes("http"))
    );
    const arrx = uniqBy(removeNoImages, function (e) {
        return e.content;
    });
    return arrx;
}
const { newsid } = Astro.params as { newsid: string; slug?: string };

//const keys:string[] = slug.split('-').filter(x => x.length > 4) 
 
// const newsterms = await sqlquery('select * from keyz where key =  "'+keys.join('" or key = "zxxx')+'"');
 
 //const differencies = getUniqueStrings(keys,terms)
 type Doc = {
   random:number;
   title: string;
   key?:string;
   _id?:string;
   id?:string;
   image: string;
   content ? : string;
   date ? : string;
   html ? : { type: string;content: string; };
   nid: string;
 } 
const getnid  = await db.get(newsid)  
const newsx =  await db.view("newsbg/news", {
    update: false,
    start_key: getnid.nid,
    descending: true,
    limit:10,
    skip:getnid.random,
    cache: 864000,
});
 

 
const news = newsx.rows  as Doc []
 
 


const { title, image, html, content, date, nid } = getnid as any
 

const parsed  = content
    ? JSON.parse(content).html.map((x: string) => ({
          type: "p",
          content: x,
      }))
    :  html ;
   function formatDate(date: Date): string {
      const options: Intl.DateTimeFormatOptions = {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          hour12: false
        };
      return date.toLocaleString('bg-BG', options);
    }
    function getRandomDate(year: number): Date {
      const month = Math.floor(Math.random() * 12) + 1;
        const day = Math.floor(Math.random() * 31) + 1;
        const hour = Math.floor(Math.random() * 14) + 9;
        return new Date(year, month - 1, day, hour);
    }
---

<Layout title={title} description={title} image={image} hideFooter={true}>
    {formatDate(new Date(date ? date : getRandomDate(2021) ))}
    <h1 class="font-bold sm:text-2xl md:text-4xl">{title}</h1>
    <div class="flex justify-center items-center">
        <img src={'https://cache.kloun.lol/api/img/'+nid+'.jpg'} class="rounded-md" loading="lazy"  />
    </div>
    <div class="mb-6 items-center justify-center">
        <RudSense />
        <article class="leading-relaxed" id="article">
            {
                getLastP(parsed).map(
                    ({ type, content }: { type: string; content: string }) =>
                        type === "p" ? (
                            <p class="text-md">{content}</p>
                        ) : (
                            <div class="flex justify-center items-center">
                                <img src={content} class="rounded-md" loading="lazy" />
                            </div>
                        )
                )
            }
        </article>
        <div class="clear-both"></div>
        <RudSense main={true} />
        
        <div class="clear-both"></div>
    </div>
    <div class="flex flex-wrap gap-3">
      {
           news.map(
              ({
                  id,
                  title,
                  key,
                  date,
                  image,
              }) => (
                  <CardNews
                      title={title}
                      img={image}
                      date={date || ''}
                      key={key || ''}
                      id={id || ''}
                  />
              )
          )
      }
    </div>
</Layout>
