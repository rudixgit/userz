---
export interface Props {
    prefix: string;
    items: number | { key: string }[];
    pageSize: number;
    currentPage: number;
}

const { items, pageSize, currentPage, prefix } = Astro.props;

function makeArray({
    pagesToShow,
    items,
    pageSize,
    currentPage,
}: {
    pagesToShow: number;
    items: number | { key: string }[];
    pageSize: number;
    currentPage: number;
}) {
    const middle = Math.floor(pagesToShow / 2);
    const isArr = Array.isArray(items);

    let startIndex = currentPage - middle;
    let endIndex = currentPage + middle;
    const pagesCount = Math.ceil(isArr ? items.length : items / pageSize);
    const pages = Array.from({ length: pagesCount }, (_, i) => i + 1);

    if (startIndex < 1) {
        startIndex = 1;
        endIndex = startIndex + pagesToShow;
        if (endIndex > pagesCount) {
            endIndex = pagesCount;
        }
    }

    if (endIndex > pagesCount) {
        endIndex = pagesCount;
        startIndex = endIndex - pagesToShow;
        if (startIndex < 1) {
            startIndex = 1;
        }
    }

    const pagesToRender = pages.slice(startIndex - 1, endIndex);
    return pagesToRender;
}

const pagesToRender = makeArray({
    pagesToShow: 9,
    items,
    pageSize,
    currentPage,
});
const pagesToRenderMobile = makeArray({
    pagesToShow: 3,
    items,
    pageSize,
    currentPage,
});
---

<div
    class="fixed bottom-2 left-2 right-2 z-20 flex justify-center bg-black/30 p-4 backdrop-blur-sm rounded-xl"
>
    <div class="btn-group hidden sm:flex">
        {
            pagesToRender.map((page: number) => (
                <a
                    href={
                        page === currentPage
                            ? "#"
                            : `${prefix}${
                                  page === 1
                                      ? prefix.includes("_")
                                          ? 1
                                          : ""
                                      : page
                              }/`
                    }
                    class={
                        page === currentPage
                            ? "btn px-4 font-bold bg-gray-700 dark:bg-gray-500"
                            : "btn px-4 font-bold"
                    }
                >
                    {page}
                </a>
            ))
        }
    </div>
    <div class="block xs:hidden sm:hidden">
        <div class="btn-group">
            {
                pagesToRenderMobile.map((page: number) => (
                    <a
                        href={
                            page === currentPage
                                ? "#"
                                : `${prefix}${page === 1 ? "" : page}/`
                        }
                        rel="nofollow"
                        class={
                            page === currentPage
                                ? "btn px-4 font-bold bg-gray-700 dark:bg-gray-500"
                                : "btn px-4 font-bold"
                        }
                    >
                        {page}
                    </a>
                ))
            }
        </div>
    </div>
</div>
