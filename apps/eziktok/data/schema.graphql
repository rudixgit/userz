input CreateDdbInput {
	cat: String!
	deepness: Int
	letter: String
	location: String
	nid: String
	price: Int
	query: String
	subcat: String
	type: String!
}

type Ddb {
	cat: String!
	deepness: Int
	id: String!
	letter: String
	location: String
	nid: String
	price: Int
	query: String
	subcat: String
	type: String!
}

type DdbConnection {
	items: [Ddb]
	nextToken: String
}

input DeleteDdbInput {
	id: String!
}

type Mutation {
	createDdb(input: CreateDdbInput!): Ddb
	deleteDdb(input: DeleteDdbInput!): Ddb
}

type Query {
	getDdb(id: String!): Ddb
	listDdbs(filter: TableDdbFilterInput, limit: Int, nextToken: String,sortDirection:String): DdbConnection

}

enum SortOrder {
	ASC
	DESC
}



input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableDdbFilterInput {
	cat: TableStringFilterInput
	deepness: TableIntFilterInput
	id: TableStringFilterInput
	letter: TableStringFilterInput
	location: TableStringFilterInput
	nid: TableIntFilterInput
	price: TableIntFilterInput
	query: TableStringFilterInput
	subcat: TableStringFilterInput
	type: TableStringFilterInput
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
	sortDirection: String
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
	sortDirection: String

}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
	sortDirection: String
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
	sortDirection: String

}

